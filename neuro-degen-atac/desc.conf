title = "Single-cell epigenomic identification of inherited risk loci in Alzheimer’s and Parkinson’s disease"

# a thumbnail image of some nice image representing your dataset, sometimes it's figure 1, sometimes 
# the journal cover, or just a screenshot of the t-SNE plot. If the file is bigger than 400px,
# optimize the image size to something smaller that can load progressively with this Unix command:
# convert myImage.png -sampling-factor 4:2:0 -strip -quality 85 -interlace JPEG -colorspace sRGB -resize 400^ thumb.jpg

image = "thumb.jpg"

# abstract of paper or dataset summary text
abstract = """
<p>
From <a href="https://www.nature.com/articles/s41588-020-00721-x"
target="_blank">Corces et al</a>:
<p>
Genome-wide association studies (GWAS) have identified thousands of variants
associated with disease phenotypes. However, the majority of these variants do
not alter coding sequences, making it difficult to assign their function. To
this end, we present a multi-omic epigenetic atlas of the adult human brain
through profiling of the chromatin accessibility landscapes and
three-dimensional chromatin interactions of seven brain regions across a cohort
of 39 cognitively healthy individuals. Single-cell chromatin accessibility
profiling of 70,631 cells from six of these brain regions identifies 24
distinct cell clusters and 359,022 cell type-specific regulatory elements,
capturing the regulatory diversity of the adult brain. We develop a machine
learning classifier to integrate this multi-omic framework and predict dozens
of functional single nucleotide polymorphisms (SNPs), nominating gene and
cellular targets for previously orphaned GWAS loci. These predictions both
inform well-studied disease-relevant genes, such as BIN1 in microglia for
Alzheimer’s disease (AD) and reveal novel gene-disease associations, such as
STAB1 in microglia and MAL in oligodendrocytes for Parkinson’s disease (PD).
Moreover, we dissect the complex inverted haplotype of the MAPT (encoding tau)
PD risk locus, identifying ectopic enhancer-gene contacts in neurons that
increase MAPT expression and may mediate this disease association. This work
greatly expands our understanding of inherited variation in AD and PD and
provides a roadmap for the epigenomic dissection of noncoding regulatory
variation in disease.
"""

# methods: please describe roughly what the samples are and how you processed them computationally
methods = """
<section>Single-cell ATAC-seq library generation</section>
<p>
Cryopreserved nuclei were thawed on ice and 65,000 nuclei were transferred to a
tube containing 1 ml of RSB-T [10 mM Tris-HCl pH 7.5, 10 mM NaCl, 3 mM MgCl2,
0.1% Tween]. Nuclei were pelleted at 500 RCF for 5 minutes at 4&deg;C in a fixed
angle rotor. The supernatant was fully removed using two pipetting steps (p1000
to remove down to the last 100 ul, then p200 to remove all remaining
supernatant). This pellet was then gently resuspended in 12 ul of 1x Nuclei
Buffer (10x Genomics). To transpose, 5 ul of this nuclei suspension (containing
27,000 nuclei) was transferred to a tube containing 10 ul of transposition mix
(10x Genomics). This reaction mixture was incubated at 37&deg;C for 1 hour to
transpose. The remainder of library generation was completed as described in
the 10x Genomics Single Cell ATAC Regent Kits User Guide (v1 Chemistry).

<section>Single-cell ATAC-seq LSI clustering and visualization</section>
<p>
To cluster our scATAC-seq data, we first identified a robust set of peak
regions followed by iterative LSI clustering. Briefly, we created 1-kb
windows tiled across the genome and determined whether each cell was accessible
within each window (binary). Next, we identified the top 50,000 accessible
windows across all samples (accounting for GC bias) and performed an LSI
dimensionality reduction (TF-IDF transformation followed by Singular Value
Decomposition SVD) on these windows followed by Harmony batch correction. We
then performed Seurat clustering (FindClusters v2.3) on the harmonized LSI
dimensions at a resolution of 0.8, 0.4 and 0.2, keeping the clustering for
which the minimum cluster size was greater than 100 cells (0.2 if this
condition is not met). For each cluster, we called peaks on the Tn5-corrected
insertions (each end of the Tn5-corrected fragments) using the MACS2 callpeak
command with parameters ‘--shift −75 --extsize 150 --nomodel --call-summits
--nolambda --keep-dup all -q 0.05’. The peak summits were then extended by 250
bp on either side to a final width of 501 bp, filtered by the ENCODE hg38
blacklist (https://www.encodeproject.org/ annotations/ENCSR636HFF/), and
filtered to remove peaks that extend beyond the ends of chromosomes. We then
created a non-overlapping set of extended summits across all of these peaks as
described previously.
<p>
We then counted the accessibility for each cell in these peak regions to create
an accessibility matrix. We then adopted the iterative LSI clustering
approach to unbiasedly identify clusters that are due to biological vs
technical variation. Briefly, we computed the TF-IDF transformation as
described by Cusanovich et. al. To do this, we divided each index by the
colSums of the matrix to compute the cell “term frequency”. Next, we multiplied
these values by log(1 + ncol(matrix)/rowSums(matrix)), which represents the
“inverse document frequency”. This yields a TF-IDF matrix that can be used as
input to irlba’s SVD implementation in R. We then used Harmony to batch correct
the LSI dimensions in R. Using the first 25 reduced dimensions as input into a
Seurat object, crude clusters were identified using Seurat’s (v2.3) SNN graph
clustering FindClusters function with a resolution of 0.2. We then calculated
the cluster sums from the binarized accessibility matrix and then
log-normalized using edgeR’s ‘cpm(matrix, log = TRUE, prior.count = 3)’ in R.
Next, we identified the top 25,000 varying peaks across all clusters using
‘rowVars’ in R. This was done on the cluster log-normalized matrix rather than
the sparse binary matrix because: (1) it reduced biases due to cluster cell
sizes, and (2) it attenuated the mean-variability relationship by converting to
log space with a scaled prior count. The 25,000 variable peaks were then used
to subset the sparse binarized accessibility matrix and recompute the TF-IDF
transform. We used SVD on the TF-IDF matrix to generate a lower dimensional
representation of the data by retaining the first 25 dimensions. We then used
Harmony to batch correct the LSI dimensions in R. We then used these reduced
dimensions as input into a Seurat object and crude clusters were identified
using Seurat’s (v.2.3) SNN graph clustering FindClusters function with a
resolution of 0.6. This process was repeated a third time with a resolution of
1.0. Then, these same reduced dimensions were used as input to Seurat’s
‘RunUMAP’ with default parameters and plotted in ggplot2 using R.

<section>Identification of clusters and cell types from scATAC-seq data</section>
<p>
Different clusters and cell types were manually identified using promoter
accessibility and gene activity scores for various lineage-defining genes.
Microglia (Cluster 24) were identified based on accessibility near the IBA1,
CD14, CD11C, PTGS1, and PTGS2 genes. Astrocytes (Clusters 13-17) were
identified based on accessibility near the GFAP and FGFR3 genes. Excitatory
neurons (Clusters 1, 3, and 4 were identified based on accessibility near the
SLC17A6 and SLC17A7 genes. Inhibitory neurons (Cluster 2, 11, and 12) were
identified based on accessibility near the GAD2 and SLC32A1 genes. Medium spiny
neurons (most of Cluster 2) were identified based on accessibility near the
DARPP32 gene. Oligodendrocytes (Clusters 19-23) were identified based on
accessibility near the MAG and SOX10 genes. OPCs (Clusters 8-10) were
identified based on accessibility near the PDGFRA gene. All neuronal subsets,
for example nigral neurons (Cluster 5-6), were identified primarily as neurons
based on accessibility near the NEFL, RBFOX3, VGF, and GRIN1 genes and then
subdivided based on the region of origin and the accessibility near other genes
mentioned above.
"""

# Note that all of these identifiers can also be a list of values.
# e.g. you could write 
# pmid = ["123123", "23423423"]
# All identifiers and URLS can contain a optional description after a space

# URL to pre-print
#biorxiv_url = "https://www.biorxiv.org/content/10.1101/2020.01.06.896159v1 Corces et al. 2020. bioRxiv."
# URL to paper fulltext
paper_url = "https://www.nature.com/articles/s41588-020-00721-x Corces et al. 2020. Nat Genet."
# URL to some other dataset related website, e.g. the hosting lab's own viewer
#other_url= "http://university.edu/lab/dataset Our Lab Website"
# DOI
#doi="xxx"
#

# PMID of publication
pmid = "33106633"
# GEO Series accession, usually starts with GSE
geo_series = "GSE147672"
# dbGaP accession, usually starts with phs.
# dbgap = "phs000424.v7.p2"
# arrayexpress accession
# arrayexpress = "xxx"
# ENA project accession
# ena_project = "ENAP12341"
# SRA accession
sra_study = "SRP254409"
# NBCI Bioproject acccession
bioproject = "PRJNA616031"
# Others:
# cirm_dataset= "xxxx"
# ega_study="xxxx"
#
# supplemental files can be a raw expression matrix, Seurat or Scanpy files or anything else, like protocols
#supplFiles = [
#{ "file" : "seurat3.rds", "label" : "Seurat3 RDS"},
#{ "file" : "scanpy.h5ad", "label" : "Scanpy h5ad"},
#]
# You can add a file with the original raw data, if needed. It gets copied over and added to the Downloads tab, with a note
# rawMatrixFile= "raw10XFile.mtz.zip"
# rawMatrixNote= "Original 10X output file"

#submitter = "John Doe"
#version = 1
#submission_date = "2019-04-22"
#lab = "Mike Bigboss"
#institution= "RichUniversity"
#body_part = "brain"
#
# Any other information you want to show on the dataset info page
#custom = {"sample barcode": "1231-HH11" }
#
#algParams = OrderedDict([('doTrimCells', True), ('minGenes', 200), ('doTrimGenes', True), ('minCells', 3), ('doFilterMito', False), ('mitoMax', 0.05), ('geneIdType', 'auto'), ('doFilterGenes', True), ('filterMaxGenes', 15000), ('filterMinGenes', 10), ('doNormalize', False), ('countsPerCell', 10000), ('doTrimVarGenes', False), ('varMinMean', 0.0125), ('varMaxMean', 3), ('varMinDisp', 0.5), ('useRaw', True), ('doRegress', False), ('pcCount', 'auto'), ('louvainNeighbors', 15), ('louvainRes', 1.0), ('doLayouts', ['tsne', 'umap', 'fa']), ('doMarkers', True), ('markerCount', 50), ('inDir', ''), ('doExp', False), ('doLog', True), ('regressMax', 10), ('doLouvain', True), ('inMeta', None), ('inCluster', None), ('ScanpyVersion', '1.6.0')])
